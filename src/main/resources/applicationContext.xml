<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <context:component-scan base-package="com.web.spittr"  >
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 数据库连接 配置 -->
    <context:property-placeholder location="classpath:config.properties"/>
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"  >
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- security 配置 -->
    <security:http auto-config="true">
        <security:intercept-url pattern="/**" access="ROLE_USER"/>
    </security:http>

    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="user" authorities="ROLE_USER"/>
                <security:user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>


<!--    <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:com/counter/mapper/*Mapper.xml"></property>
        <property name="configLocation" value="classpath:mybatis.xml"></property>
        &lt;!&ndash; classpath: 在默认resources文件夹下   classpath*:  会去寻找其他路径 &ndash;&gt;
            &lt;!&ndash;以下用于分页&ndash;&gt;
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        &lt;!&ndash;使用下面的方式配置参数，一行配置一个 &ndash;&gt;
                        <value>
                            &lt;!&ndash; params=value1&ndash;&gt;
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>

    </bean>-->


<!--
     <bean name="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>-->
    <!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
   <!-- <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        &lt;!&ndash;扫描所有mapper接口的实现，加入到ioc容器中 &ndash;&gt;
        <property name="basePackage" value="com.counter.mapper"></property>
        <property name="beanName" value="sqlSessionFactory" />
    </bean>-->

    <!-- ===============事务控制的配置 ================-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制住数据源  -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
<!--
    开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）
-->
    <aop:config>
        <!-- 切入点表达式 -->
        <aop:pointcut expression="execution(* com.web.spittr.service.impl..*(..))" id="txPoint"/>
        <!-- 配置事务增强 -->
          <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

   <!-- 配置事务增强，事务如何切入  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 所有方法都是事务方法 -->
            <tx:method name="*"/>
          <!--  以get开始的所有方法  -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>